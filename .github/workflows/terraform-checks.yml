name: "Terraform Static Checks"

# This workflow runs the same checks available locally via Makefile
# For local development, use: make check test

on:
  push:
    branches: [ "main"]
  pull_request:
    branches: [ "main"]
  workflow_dispatch:

jobs:
  terraform-lint-secure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: "~1.5"

      - name: Setup Python for Checkov
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.11'

      - name: Cache Security Tools
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.local/bin
            ~/.cache/pip
          key: security-tools-${{ runner.os }}-v1

      - name: Install Security Tools
        run: |
          # Install tflint
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

          # Install Trivy (replaces tfsec)
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

          # Install checkov
          pip install --user checkov

          # Add tools to PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Terraform Format Check
        run: |
          echo "🔍 Checking Terraform formatting..."
          terraform fmt -check -recursive -diff .
          if [ $? -ne 0 ]; then
            echo "❌ Terraform files are not properly formatted"
            echo "💡 Run 'terraform fmt -recursive' to fix formatting issues"
            exit 1
          fi
          echo "✅ All Terraform files are properly formatted"

      - name: Terraform Validate
        run: |
          echo "🔍 Validating Terraform configuration..."

          # Validate root module
          terraform init -backend=false
          terraform validate

          # Validate examples
          for example in examples/*/; do
            if [ -d "$example" ]; then
              echo "🔍 Validating example: $example"
              cd "$example"
              terraform init -backend=false
              terraform validate
              cd - > /dev/null
            fi
          done

          echo "✅ All Terraform configurations are valid"

      - name: Setup TFLint Config
        run: |
          cat > .tflint.hcl << EOF
          plugin "terraform" {
            enabled = true
            preset  = "recommended"
          }

          plugin "google" {
            enabled = true
            version = "0.25.0"
            source  = "github.com/terraform-linters/tflint-ruleset-google"
          }

          rule "terraform_required_providers" {
            enabled = true
          }

          rule "terraform_required_version" {
            enabled = true
          }

          rule "terraform_naming_convention" {
            enabled = true
          }

          rule "terraform_documented_variables" {
            enabled = true
          }

          rule "terraform_documented_outputs" {
            enabled = true
          }
          EOF

      - name: Run TFLint
        run: |
          echo "🔍 Running TFLint checks..."
          tflint --init
          tflint --format=compact
          echo "✅ TFLint checks completed"

      - name: Run Trivy Security Scan
        run: |
          echo "🔍 Running Trivy security scan..."
          # Run Trivy with JSON output for artifacts
          trivy config . \
            --format json \
            --output trivy-results.json \
            --exit-code 0

          # Also output human-readable format for logs
          echo "📊 Trivy Security Results:"
          trivy config . --format table
          echo "✅ Trivy security scan completed"

      - name: Run Checkov Security Scan
        run: |
          echo "🔍 Running Checkov security scan..."
          checkov -d . \
            --framework terraform \
            --output json \
            --output-file checkov-results.json \
            --soft-fail

          # Also output human-readable format
          checkov -d . \
            --framework terraform \
            --compact \
            --quiet
          echo "✅ Checkov security scan completed"

      - name: Upload Security Scan Results
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: security-scan-results
          path: |
            trivy-results.json
            checkov-results.json
          retention-days: 30

      - name: Test Examples
        run: |
          echo "🔍 Testing example configurations..."

          for example in examples/*/; do
            if [ -d "$example" ]; then
              echo "🧪 Testing example: $example"
              cd "$example"

              # Check if terraform.tfvars.example exists
              if [ -f "terraform.tfvars.example" ]; then
                cp terraform.tfvars.example terraform.tfvars
              fi

              # Test terraform plan (without applying)
              terraform init -backend=false
              terraform plan -out=plan.tfplan

              echo "✅ Example $example validated successfully"
              cd - > /dev/null
            fi
          done

      - name: Generate Security Report Summary
        if: always()
        run: |
          echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "trivy-results.json" ]; then
            TRIVY_ISSUES=$(jq '.Results[] | select(.Misconfigurations) | .Misconfigurations | length' trivy-results.json 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
            echo "**Trivy:** $TRIVY_ISSUES issues found" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "checkov-results.json" ]; then
            CHECKOV_FAILED=$(jq '.summary.failed' checkov-results.json 2>/dev/null || echo "0")
            CHECKOV_PASSED=$(jq '.summary.passed' checkov-results.json 2>/dev/null || echo "0")
            echo "**Checkov:** $CHECKOV_FAILED failed, $CHECKOV_PASSED passed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 Detailed results are available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY
