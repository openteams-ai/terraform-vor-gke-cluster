# Copyright (c) 2024 VOR Technologies

name: 'Test Single Terraform Example'
description: 'Tests a single Terraform example configuration with mocked GCP credentials'

inputs:
  example-path:
    description: 'Path to the specific example directory'
    required: true
  terraform-version:
    description: 'Terraform version to use'
    required: false
    default: 'latest'
  mock-project-id:
    description: 'Mock GCP project ID for testing'
    required: false
    default: 'mock-project'
  mock-region:
    description: 'Mock GCP region for testing'
    required: false
    default: 'us-central1'
  mock-zone:
    description: 'Mock GCP zone for testing'
    required: false
    default: 'us-central1-a'

outputs:
  example-name:
    description: 'Name of the example tested'
    value: ${{ steps.test-example.outputs.example-name }}
  test-result:
    description: 'Result of the test (passed/failed)'
    value: ${{ steps.test-example.outputs.test-result }}
  init-success:
    description: 'Whether terraform init succeeded'
    value: ${{ steps.test-example.outputs.init-success }}
  plan-success:
    description: 'Whether terraform plan succeeded'
    value: ${{ steps.test-example.outputs.plan-success }}

runs:
  using: 'composite'
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: Test Single Example
      id: test-example
      shell: bash
      env:
        # Mock GCP environment variables for testing
        GOOGLE_CREDENTIALS: '{"type":"service_account","project_id":"${{ inputs.mock-project-id }}","private_key_id":"mock","private_key":"-----BEGIN PRIVATE KEY-----\nMOCK\n-----END PRIVATE KEY-----\n","client_email":"mock@${{ inputs.mock-project-id }}.iam.gserviceaccount.com","client_id":"mock","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token"}'
        GOOGLE_PROJECT: ${{ inputs.mock-project-id }}
        EXAMPLE_PATH: ${{ inputs.example-path }}
      run: |
        echo "🧪 Testing Terraform example: $EXAMPLE_PATH"

        # Validate that the example path exists
        if [ ! -d "$EXAMPLE_PATH" ]; then
          echo "❌ Example directory not found: $EXAMPLE_PATH"
          echo "example-name=unknown" >> $GITHUB_OUTPUT
          echo "test-result=failed" >> $GITHUB_OUTPUT
          echo "init-success=false" >> $GITHUB_OUTPUT
          echo "plan-success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Get example name for output
        example_name=$(basename "$EXAMPLE_PATH")
        echo "📂 Example name: $example_name"
        echo "example-name=$example_name" >> $GITHUB_OUTPUT

        # Change to example directory
        cd "$EXAMPLE_PATH"

        # Check if terraform.tfvars.example exists and copy it
        if [ -f "terraform.tfvars.example" ]; then
          cp terraform.tfvars.example terraform.tfvars
          echo "📝 Copied terraform.tfvars.example to terraform.tfvars"
        fi

        # Create a mock provider configuration for testing
        cat > provider_override.tf << 'EOF'
        # Mock provider configuration for CI testing
        terraform {
          required_providers {
            google = {
              source  = "hashicorp/google"
              version = "~> 5.0"
            }
          }
        }

        provider "google" {
          project = "${{ inputs.mock-project-id }}"
          region  = "${{ inputs.mock-region }}"
          zone    = "${{ inputs.mock-zone }}"

          # Use mock credentials from environment
          credentials = file("mock-credentials.json")

          # Skip provider registration for testing
          user_project_override = false
        }
        EOF

        # Create mock credentials file
        echo "$GOOGLE_CREDENTIALS" > mock-credentials.json

        # Initialize variables for tracking success
        init_success=false
        plan_success=false
        overall_success=false

        echo "🔧 Initializing Terraform for $example_name..."
        if terraform init -backend=false; then
          echo "✅ Terraform init successful for $example_name"
          init_success=true
          echo "init-success=true" >> $GITHUB_OUTPUT

          echo "📋 Running Terraform plan for $example_name..."
          if terraform plan -out=plan.tfplan \
            -var="project_id=${{ inputs.mock-project-id }}" \
            -var="region=${{ inputs.mock-region }}" \
            -var="location=${{ inputs.mock-zone }}" \
            -detailed-exitcode 2>/dev/null || [ $? -eq 2 ]; then
            echo "✅ Terraform plan successful for $example_name (exit code 0 or 2 indicates success)"
            plan_success=true
            overall_success=true
            echo "plan-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform plan failed for $example_name"
            echo "plan-success=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ Terraform init failed for example: $example_name"
          echo "init-success=false" >> $GITHUB_OUTPUT
          echo "plan-success=false" >> $GITHUB_OUTPUT
        fi

        # Clean up mock files
        rm -f provider_override.tf mock-credentials.json terraform.tfvars plan.tfplan
        rm -rf .terraform .terraform.lock.hcl

        # Set final result
        if [ "$overall_success" = true ]; then
          echo "✅ Example $example_name validation completed successfully"
          echo "test-result=passed" >> $GITHUB_OUTPUT

          # Create step summary for this example
          echo "# ✅ Example: $example_name" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "**Init:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "**Plan:** ✅ Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Example $example_name validation failed"
          echo "test-result=failed" >> $GITHUB_OUTPUT

          # Create step summary for this example
          echo "# ❌ Example: $example_name" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Failed" >> $GITHUB_STEP_SUMMARY
          echo "**Init:** $([ "$init_success" = true ] && echo "✅ Success" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "**Plan:** $([ "$plan_success" = true ] && echo "✅ Success" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY

          exit 1
        fi
