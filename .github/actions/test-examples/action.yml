name: 'Test Terraform Examples'
description: 'Tests Terraform example configurations with mocked GCP credentials'

inputs:
  example-path:
    description: 'Path to the specific example directory to test'
    required: true
  terraform-version:
    description: 'Terraform version to use'
    required: false
    default: 'latest'
  mock-project-id:
    description: 'Mock GCP project ID for testing'
    required: false
    default: 'mock-project'
  mock-region:
    description: 'Mock GCP region for testing'
    required: false
    default: 'us-central1'
  mock-zone:
    description: 'Mock GCP zone for testing'
    required: false
    default: 'us-central1-a'
  verbose:
    description: 'Show detailed terraform output'
    required: false
    default: 'false'

outputs:
  test-result:
    description: 'Result of the test (passed/failed)'
    value: ${{ steps.test-example.outputs.test-result }}
  init-success:
    description: 'Whether terraform init succeeded'
    value: ${{ steps.test-example.outputs.init-success }}
  plan-success:
    description: 'Whether terraform plan succeeded'
    value: ${{ steps.test-example.outputs.plan-success }}

runs:
  using: 'composite'
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: Make test script executable
      shell: bash
      run: chmod +x ./scripts/test-terraform-examples.sh

    - name: Test Terraform Example
      id: test-example
      shell: bash
      env:
        MOCK_PROJECT_ID: ${{ inputs.mock-project-id }}
        MOCK_REGION: ${{ inputs.mock-region }}
        MOCK_ZONE: ${{ inputs.mock-zone }}
      run: |
        echo "üß™ Testing example: ${{ inputs.example-path }}"

        # Determine verbosity flag
        VERBOSE_FLAG=""
        if [ "${{ inputs.verbose }}" = "true" ]; then
          VERBOSE_FLAG="-v"
        fi

        # Run the test script for the specific example
        if ./scripts/test-terraform-examples.sh $VERBOSE_FLAG -e "$(basename "${{ inputs.example-path }}")"; then
          echo "test-result=passed" >> $GITHUB_OUTPUT
          echo "init-success=true" >> $GITHUB_OUTPUT
          echo "plan-success=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Example test passed"
        else
          echo "test-result=failed" >> $GITHUB_OUTPUT
          echo "init-success=false" >> $GITHUB_OUTPUT
          echo "plan-success=false" >> $GITHUB_OUTPUT
          echo "‚ùå Example test failed"
          exit 1
        fi
